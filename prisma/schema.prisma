generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin table for super administrators
model Admin {
  id          Int      @id @default(autoincrement())
  firstname   String   @map("firstname")
  lastname    String   @map("lastname")
  email       String   @unique @map("email")
  password    String   @map("password")
  role        String   @default("super_admin") // super_admin, admin
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  lastLoginAt DateTime? @map("last_login_at")
  
  // Relations - One-to-one relationship with database
  managedDatabase Database? // Each admin can manage only one database
  adminSessions   AdminSession[]

  @@map("admins")
}

// Database instances managed by admins
model Database {
  id           String   @id @default(uuid())
  name         String   @map("name")
  displayName  String   @map("display_name")
  databaseUrl  String   @map("database_url") // Connection string for this database
  description  String?  @map("description")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // Admin who created and manages this database - One-to-one relationship
  managedById  Int      @unique @map("managed_by_id")
  managedBy    Admin    @relation(fields: [managedById], references: [id])
  
  // Database configuration
  maxUsers     Int?     @default(1000) @map("max_users")
  maxStorage   Float?   @default(10.0) @map("max_storage_gb") // in GB
  
  // Relations to database-specific data
  batches      Batch[]
  tokenStats   TokenStats[]
  apiaries     Apiary[]
  certifications Certification[]
  accounts     Account[]
  sessions     Session[]
  verificationTokens VerificationToken[]
  beeusers     beeusers[] // Add relation to beeusers
  
  @@unique([name])
  @@map("databases")
}

// Admin session management
model AdminSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  adminId      Int      @map("admin_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  admin        Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_sessions")
}

// User table with required database reference
model beeusers {
  id                Int             @id @default(autoincrement()) @map("id")
  firstname         String          @map("firstname")
  lastname          String          @map("lastname")
  email             String          @map("email") // Removed @unique since users can have same email in different databases
  phonenumber       String?         @map("phonenumber")
  password          String          @map("password")
  createdAt         DateTime        @default(now()) @map("created_at")
  confirmationToken String?         @map("confirmation_token")
  isConfirmed       Boolean         @default(false) @map("is_confirmed")
  passportId        String?         @map("passport_id")
  passportFile      String?         @map("passport_file")
  phoneConfirmed    String?         @map("phone_confirmed")
  isProfileComplete Boolean         @default(false)
  googleId          String?         @map("google_id")
  isPremium         Boolean         @default(false) @map("is_premium")
  premiumExpiresAt  DateTime?       @map("premium_expires_at")
  premiumStartedAt  DateTime?       @map("premium_started_at")
  role              String          @default("employee")
  
  // New field to identify if this user is also an admin
  isAdmin           Boolean         @default(false) @map("is_admin")
  adminId           Int?            @map("admin_id") // Reference to admin table (no foreign key constraint for flexibility)
  
  // Database association - Required field
  databaseId        String          @map("database_id")
  database          Database        @relation(fields: [databaseId], references: [id])
  
  accounts          Account[]
  Apiary            Apiary[]
  batches           Batch[]
  certifications    Certification[]
  sessions          Session[]
  tokenStats        TokenStats?

  // Ensure email is unique within each database
  @@unique([email, databaseId])
  @@map("beeusers")
}

model Batch {
  id                        String   @id @default(uuid())
  batchNumber               String   
  createdAt                 DateTime @default(now())
  bothCertifications        Float    @default(0)
  bothCertificationsPercent Int      @default(0)
  certificationDate         String?
  completedChecks           Int      @default(0)
  containerType             String   @default("Glass")
  expiryDate                String?
  jarsUsed                  Int      @default(0)
  labelType                 String   @default("Standard")
  originOnly                Float    @default(0)
  originOnlyPercent         Int      @default(0)
  qualityOnly               Float    @default(0)
  qualityOnlyPercent        Int      @default(0)
  status                    String   @default("Pending")
  totalChecks               Int      @default(4)
  uncertified               Float    @default(0)
  uncertifiedPercent        Int      @default(0)
  updatedAt                 DateTime @updatedAt
  userId                    Int
  weightKg                  Float    @default(0)
  batchName                 String
  labReportPath             String?  @map("lab_report_path")
  productionReportPath      String?  @map("production_report_path")
  jarCertifications         Json?
  honeyCertified            Float?
  honeyRemaining            Float?
  totalHoneyCollected       Float?
  
  // Database association - Required field
  databaseId                String   @map("database_id")
  database                  Database @relation(fields: [databaseId], references: [id])
  
  apiaries                  Apiary[]
  user                      beeusers @relation(fields: [userId], references: [id])

  // Ensure batchNumber is unique within each database
  @@unique([batchNumber, databaseId])
}

model TokenStats {
  id                 String   @id @default(uuid())
  userId             Int      @unique
  totalTokens        Int      @default(0)
  remainingTokens    Int      @default(0)
  originOnly         Int      @default(0)
  qualityOnly        Int      @default(0)
  bothCertifications Int      @default(0)
  
  // Database association - Required field
  databaseId         String   @map("database_id")
  database           Database @relation(fields: [databaseId], references: [id])
  
  beeusers           beeusers @relation(fields: [userId], references: [id])
}

model Apiary {
  id             Int      @id @default(autoincrement())
  name           String
  number         String
  hiveCount      Int
  latitude       Float
  longitude      Float
  locationName   String?  // Optional location name field
  batchId        String?
  kilosCollected Float    @default(0)
  createdAt      DateTime @default(now())
  userId         Int
  
  // Database association - Required field
  databaseId     String   @map("database_id")
  database       Database @relation(fields: [databaseId], references: [id])
  
  batch          Batch?   @relation(fields: [batchId], references: [id])
  user           beeusers @relation(fields: [userId], references: [id])
}

model Certification {
  id                String   @id @default(cuid())
  verificationCode  String   @map("verification_code")
  batchIds          String   @map("batch_ids")
  certificationDate DateTime @map("certification_date") @db.Date
  totalCertified    Decimal  @map("total_certified") @db.Decimal(10, 2)
  certificationType String   @map("certification_type")
  expiryDate        DateTime @map("expiry_date") @db.Date
  totalJars         Int      @map("total_jars")
  companyName       String?  @map("company_name")
  beekeeperName     String?  @map("beekeeper_name")
  location          String?
  userId            Int      @map("user_id")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Database association - Required field
  databaseId        String   @map("database_id")
  database          Database @relation(fields: [databaseId], references: [id])
  
  user              beeusers @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Ensure verification code is unique within each database
  @@unique([verificationCode, databaseId])
  @@index([verificationCode])
  @@index([userId])
  @@index([expiryDate])
}

model Account {
  id                String   @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  // Database association - Required field
  databaseId        String   @map("database_id")
  database          Database @relation(fields: [databaseId], references: [id])
  
  user              beeusers @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId, databaseId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   
  userId       Int
  expires      DateTime
  
  // Database association - Required field
  databaseId   String   @map("database_id")
  database     Database @relation(fields: [databaseId], references: [id])
  
  user         beeusers @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Ensure session token is unique within each database
  @@unique([sessionToken, databaseId])
}

model VerificationToken {
  identifier String
  token      String   
  expires    DateTime
  
  // Database association - Required field
  databaseId String   @map("database_id")
  database   Database @relation(fields: [databaseId], references: [id])

  @@unique([identifier, token, databaseId])
}