generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id               String          @id @default(uuid())
  name             String          @unique
  slug             String          @unique
  domain           String?         @unique
  email            String          @unique
  phone            String?
  address          String?
  logo             String?
  subscriptionPlan String          @default("basic")
  isActive         Boolean         @default(true)
  maxUsers         Int             @default(10)
  maxBatches       Int             @default(100)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  apiaries         Apiary[]
  batches          Batch[]
  certifications   Certification[]
  users            beeusers[]

  @@map("companies")
}

model beeusers {
  id                Int             @id @default(autoincrement()) @map("id")
  firstname         String          @map("firstname")
  lastname          String          @map("lastname")
  email             String          @map("email")
  phonenumber       String?         @map("phonenumber")
  password          String          @map("password")
  createdAt         DateTime        @default(now()) @map("created_at")
  confirmationToken String?         @map("confirmation_token")
  isConfirmed       Boolean         @default(false) @map("is_confirmed")
  passportId        String?         @map("passport_id")
  passportFile      String?         @map("passport_file")
  phoneConfirmed    String?         @map("phone_confirmed")
  isProfileComplete Boolean         @default(false)
  googleId          String?         @map("google_id")
  isPremium         Boolean         @default(false) @map("is_premium")
  premiumExpiresAt  DateTime?       @map("premium_expires_at")
  premiumStartedAt  DateTime?       @map("premium_started_at")
  companyId         String?         @map("company_id")
  role              String          @default("employee")
  accounts          Account[]
  Apiary            Apiary[]
  batches           Batch[]
  certifications    Certification[]
  sessions          Session[]
  tokenStats        TokenStats?
  company           Company?        @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([email, companyId])
  @@unique([phonenumber, companyId])
  @@map("beeusers")
}

model Batch {
  id                        String   @id @default(uuid())
  batchNumber               String
  createdAt                 DateTime @default(now())
  bothCertifications        Float    @default(0)
  bothCertificationsPercent Int      @default(0)
  certificationDate         String?
  completedChecks           Int      @default(0)
  containerType             String   @default("Glass")
  expiryDate                String?
  jarsUsed                  Int      @default(0)
  labelType                 String   @default("Standard")
  originOnly                Float    @default(0)
  originOnlyPercent         Int      @default(0)
  qualityOnly               Float    @default(0)
  qualityOnlyPercent        Int      @default(0)
  status                    String   @default("Pending")
  totalChecks               Int      @default(4)
  uncertified               Float    @default(0)
  uncertifiedPercent        Int      @default(0)
  updatedAt                 DateTime @updatedAt
  userId                    Int
  weightKg                  Float    @default(0)
  batchName                 String
  labReportPath             String?  @map("lab_report_path")
  productionReportPath      String?  @map("production_report_path")
  jarCertifications         Json?
  honeyCertified            Float?
  honeyRemaining            Float?
  totalHoneyCollected       Float?
  companyId                 String?  @map("company_id")
  apiaries                  Apiary[]
  company                   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user                      beeusers @relation(fields: [userId], references: [id])

  @@unique([batchNumber, companyId])
}

model TokenStats {
  id                 String   @id @default(uuid())
  userId             Int      @unique
  totalTokens        Int      @default(0)
  remainingTokens    Int      @default(0)
  originOnly         Int      @default(0)
  qualityOnly        Int      @default(0)
  bothCertifications Int      @default(0)
  beeusers           beeusers @relation(fields: [userId], references: [id])
}

model Apiary {
  id             Int      @id @default(autoincrement())
  name           String
  number         String
  hiveCount      Int
  latitude       Float
  longitude      Float
  batchId        String?
  kilosCollected Float    @default(0)
  createdAt      DateTime @default(now())
  userId         Int
  companyId      String?  @map("company_id")
  batch          Batch?   @relation(fields: [batchId], references: [id])
  company        Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user           beeusers @relation(fields: [userId], references: [id])
}

model Certification {
  id                String   @id @default(cuid())
  verificationCode  String   @unique @map("verification_code")
  batchIds          String   @map("batch_ids")
  certificationDate DateTime @map("certification_date") @db.Date
  totalCertified    Decimal  @map("total_certified") @db.Decimal(10, 2)
  certificationType String   @map("certification_type")
  expiryDate        DateTime @map("expiry_date") @db.Date
  totalJars         Int      @map("total_jars")
  companyName       String?  @map("company_name")
  beekeeperName     String?  @map("beekeeper_name")
  location          String?
  userId            Int      @map("user_id")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  companyId         String?  @map("company_id")
  company           Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user              beeusers @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([verificationCode])
  @@index([userId])
  @@index([expiryDate])
}

model Account {
  id                String   @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              beeusers @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         beeusers @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
